1- What is the .NET framework?

Ans- The .NET framework is a software development platform developed by Microsoft for building and running applications on Windows.

(-------------------------------------------------------------------------)

2- What languages are typically used in the .NET stack?

Ans- C# is the primary language used in the .NET stack, though VB.NET and F# are also supported.

(-------------------------------------------------------------------------)

3- What is ASP.NET Core?

Ans- ASP.NET Core is a cross-platform framework for building modern, cloud-based, and internet-connected applications.

(-------------------------------------------------------------------------)

4- What is the role of Visual Studio in .NET development?

Ans- Visual Studio is an integrated development environment (IDE) used to build .NET applications, providing tools for coding, debugging, and testing.

(-------------------------------------------------------------------------)

5- What are some key features of C#?

Ans- Key features include strong typing, garbage collection, exception handling, and support for object-oriented programming.

(-------------------------------------------------------------------------)

6- What is object-oriented programming (OOP)?

Ans- OOP is a programming paradigm based on the concept of objects, which can contain data and methods.

(-------------------------------------------------------------------------)

7- Why is front-end development knowledge necessary for full-stack .NET developers?

Ans- Full-stack developers need to create responsive and interactive user interfaces, requiring knowledge of HTML, CSS, JavaScript, and frameworks like ASP.NET Core.

(-------------------------------------------------------------------------)

8- What is the importance of learning HTML, CSS, and JavaScript?

Ans- These are foundational technologies for building the structure, styling, and interactivity of web pages.

(-------------------------------------------------------------------------)

9- How does ASP.NET Core facilitate web development?

Ans- ASP.NET Core allows developers to build web applications using a robust, modular framework that supports modern web standards.

(-------------------------------------------------------------------------)

10- What front-end frameworks are commonly used with .NET?

Ans- Common front-end frameworks include ASP.NET Core, Blazor, Angular, and React.

(-------------------------------------------------------------------------)

11- What is SQL Server, and why is it relevant?

Ans- SQL Server is a relational database management system by Microsoft, widely used for backend database management in .NET applications.

(-------------------------------------------------------------------------)

12- What are RESTful APIs, and why are they important?

Ans- RESTful APIs are web services that follow REST principles, allowing communication between client and server; crucial for building scalable web applications.

(-------------------------------------------------------------------------)

13- What is CI/CD in the context of .NET development?

Ans- CI/CD stands for Continuous Integration and Continuous Deployment, essential practices for automating the software delivery process.

(-------------------------------------------------------------------------)

14- Why is version control important for developers?

Ans- Version control, like Git, helps manage and track changes to code, facilitating collaboration and maintaining code history.

(-------------------------------------------------------------------------)

15- What are unit tests, and why are they necessary?

Ans- Unit tests validate the functionality of individual components, ensuring code reliability and preventing regressions.

(-------------------------------------------------------------------------)

16- What is the history of .NET?

Ans- .NET was initially released in 2002 as a Windows-only framework and later evolved to include .NET Core for cross-platform development in 2016.

(------------------------------------------------------------------------)

17- What are the key products within the .NET family?

Ans- The key products are .NET Framework (Windows), .NET Core (cross-platform), and Xamarin (cross-platform mobile apps).

(------------------------------------------------------------------------)

18- What are some productivity features of .NET?

Ans- Key productivity features include Generics, Language Integrated Query (LINQ), and asynchronous programming.

(------------------------------------------------------------------------)

19- Why is .NET considered fast for web development?

Ans- .NET offers performance tools like Visual Studio Performance Analysis and Windows Performance Analyzer to optimize application speed.

(------------------------------------------------------------------------)

20- How can debugging in .NET be improved?

Ans- Debugging can be improved by grouping related errors together and tracking bugs across multiple environments to resolve them more efficiently.

(------------------------------------------------------------------------)

21- What are the key skills required to become a Full Stack .NET Developer?

Ans- Mastery in C#, ASP.NET, SQL Server, HTML/CSS, JavaScript, and familiarity with IIS and XML Web Services.

(------------------------------------------------------------------------)

22- What is the role of SQL Server in .NET development?

Ans- SQL Server is used for managing and querying databases, a critical component of back-end development in .NET.

(-----------------------------------------------------------------------)

23- What role do design patterns play in programming?

Ans- Design patterns provide reusable solutions to common problems, facilitating the development of elegant and maintainable code.

(-----------------------------------------------------------------------)

24- How did programming languages evolve from the 1970s to the 1990s?

Ans- They evolved from lacking basic features like type checking to incorporating advanced concepts like object orientation and generics.

(-----------------------------------------------------------------------)

25- What is a design pattern?

Ans- A design pattern is a reusable solution to a common problem in software design.

(-----------------------------------------------------------------------)

26- How many classic design patterns are there?

Ans- There are 23 classic design patterns.

(-----------------------------------------------------------------------)

27- What is the purpose of design patterns?

Ans- Design patterns provide a common language for discussing solutions and enhancing code reusability and maintainability.

(-----------------------------------------------------------------------)

28- What is the Observer pattern used for?

Ans- The Observer pattern is used for defining a one-to-many dependency between objects, so when one object changes state, all its dependents are notified.

(-----------------------------------------------------------------------)

29- What is the Proxy pattern used for?

Ans- The Proxy pattern is used for providing a surrogate or placeholder to control access to another object.

(-----------------------------------------------------------------------)

30- How does the Singleton pattern ensure a class has only one instance?

Ans- The Singleton pattern restricts instantiation of a class to a single instance and provides a global point of access to that instance.

(-----------------------------------------------------------------------)

31- What is the Factory Method pattern?

Ans- The Factory Method pattern defines an interface for creating objects but allows subclasses to alter the type of objects that will be created.

(-----------------------------------------------------------------------)

32- What is the Strategy pattern used for?

Ans- The Strategy pattern defines a family of algorithms, encapsulates each one, and makes them interchangeable, allowing algorithms to vary independently from clients.

(-----------------------------------------------------------------------)

33- What is the Adapter pattern?

Ans- The Adapter pattern allows objects with incompatible interfaces to work together by converting the interface of a class into another interface expected by clients.

(-----------------------------------------------------------------------)

34- What is the Decorator pattern used for?

Ans- The Decorator pattern is used for adding new responsibilities to objects dynamically without altering their structure.

(-----------------------------------------------------------------------)

35- What is the Command pattern?

Ans- The Command pattern encapsulates a request as an object, thereby allowing for parameterization of clients with queues, requests, and operations.

(-----------------------------------------------------------------------)

36- What is the Prototype pattern used for?

Ans- The Prototype pattern is used for creating new objects by copying an existing object, known as the prototype.

(-----------------------------------------------------------------------)

37- What is the Composite pattern?

Ans- The Composite pattern allows clients to treat individual objects and compositions of objects uniformly.

(-----------------------------------------------------------------------)

38- What is the Template Method pattern?

Ans- The Template Method pattern defines the skeleton of an algorithm in a method, deferring some steps to subclasses.

(-----------------------------------------------------------------------)

39- How does the Mediator pattern facilitate communication?

Ans- The Mediator pattern defines an object that encapsulates how a set of objects interact, promoting loose coupling by preventing direct references between objects.

(-----------------------------------------------------------------------)

40- What is the Builder pattern used for?

Ans- The Builder pattern separates the construction of a complex object from its representation, allowing the same construction process to create different representations.

(-----------------------------------------------------------------------)

41- What is the Chain of Responsibility pattern?

Ans- The Chain of Responsibility pattern allows multiple objects to handle a request without the sender needing to know which object will handle it.

(-----------------------------------------------------------------------)

42- What is the State pattern?

Ans- The State pattern allows an object to alter its behavior when its internal state changes, appearing as if the object changed its class.

(-----------------------------------------------------------------------)

43- What is the Flyweight pattern used for?

Ans- The Flyweight pattern is used for minimizing memory usage by sharing as much data as possible with similar objects.

(-----------------------------------------------------------------------)

44- What is the Bridge pattern?

Ans- The Bridge pattern separates abstraction from implementation, allowing both to evolve independently.

(-----------------------------------------------------------------------)

45- What is the Memento pattern used for?

Ans- The Memento pattern captures and externalizes an object's internal state without violating encapsulation, allowing the object to be restored to that state later.

(-----------------------------------------------------------------------)

46- How does the Abstract Factory pattern differ from the Factory Method pattern?

Ans- The Abstract Factory pattern provides an interface for creating families of related or dependent objects without specifying their concrete classes, whereas the Factory Method pattern provides an interface for creating a single object.

(-----------------------------------------------------------------------)

47- What is the purpose of design pattern diagrams?

Ans- Design pattern diagrams illustrate the roles and relationships of pattern elements, aiding in understanding and communication.

(-----------------------------------------------------------------------)

48- Why is it important to understand the context and implementation of design patterns?

Ans- Understanding the context and implementation helps in selecting the most appropriate pattern and adapting it effectively to specific programming languages and scenarios.

(-----------------------------------------------------------------------)

49- Why are design patterns important?

Ans- They provide proven solutions and improve communication among developers.

(-----------------------------------------------------------------------)

50- What are the three main categories of design patterns?

Ans- Creational, Structural, and Behavioral.

(-----------------------------------------------------------------------)

51- What is the Chain of Responsibility pattern?

Ans- Passes a request along a chain of handlers, where each handler has the opportunity to process the request.

(------------------------------------------------------------------------)

52- How do design patterns relate to language features in C#?

Ans- The implementation of patterns in C# often involves advanced features such as generics, indexers, and delegates.

(------------------------------------------------------------------------)

53- How are design patterns used in real systems?

Ans- Patterns like Façade and Adapter are used in practical scenarios like compiler construction and graphical frameworks to solve common problems.

(------------------------------------------------------------------------)

54- What is the significance of understanding pattern interactions in large systems?

Ans- Patterns often work together in large systems, and understanding their interactions helps in designing robust and flexible architectures.

(------------------------------------------------------------------------)

55- What are the three types of blocks in UML diagrams?

Ans- Classes, interfaces/abstract classes, and packages.

(------------------------------------------------------------------------)

56- What is the default accessibility for attributes and operations in UML diagrams?

Ans- Attributes are private by default, and operations are public by default.

(------------------------------------------------------------------------)

57- When might types associated with attributes and operations be shown in UML diagrams?

Ans- When they are important to the pattern under consideration.

(------------------------------------------------------------------------)

58- Why are notes used in UML diagrams?

Ans- To explain relationships or important details about method interactions between classes.

(-----------------------------------------------------------------------)

59- What is the purpose of UML diagrams in relation to programming?

Ans- To show important elements of a pattern without being an exact copy of a program.

(-----------------------------------------------------------------------)

60- What major feature was introduced in C# 2.0?

Ans- Generics, allowing parameterization of classes, structs, and methods by data types.

(-----------------------------------------------------------------------)

61- What feature in C# 2.0 enables inline code blocks for delegate values?

Ans- Anonymous methods.

(-----------------------------------------------------------------------)

62- What are iterators used for in C#?

Ans- To incrementally compute and yield sequences of values.

(-----------------------------------------------------------------------)

63- How do partial types benefit C# development?

Ans- They allow classes, structs, and interfaces to be split into multiple files for easier maintenance.

(-----------------------------------------------------------------------)

64- What are nullable types in C#?

Ans- Types that represent values that can be unknown and include an additional null state.

(-----------------------------------------------------------------------)

65- What was a significant addition to C# 3.0 related to local variables?

Ans- Implicit typing, which infers variable types from initializer expressions.

(-----------------------------------------------------------------------)

66- What feature in C# 3.0 allows you to add methods to existing types without modifying their definitions?

Ans- Extension methods.

(-----------------------------------------------------------------------)

67- What are lambda expressions in C# 3.0?

Ans- An evolution of anonymous methods that provide improved type inference and conversions.

(-----------------------------------------------------------------------)

68- How do object initializers simplify object construction in C#?

Ans- They allow for easier and more readable initialization of objects.

(-----------------------------------------------------------------------)

69- What are anonymous types in C# 3.0?

Ans- Tuple types automatically inferred from object initializers.

(-----------------------------------------------------------------------)

70- What feature allows for implicit typing of arrays in C# 3.0?

Ans- Implicit typing of arrays, which infers the element type from the initializer.

(-----------------------------------------------------------------------)

71- What are query expressions in C# 3.0?

Ans- Language-integrated syntax for queries similar to SQL and XQuery.

(-----------------------------------------------------------------------)

72- What are structural design patterns?

Ans- Structural design patterns deal with object composition to create larger, more flexible structures.

(-----------------------------------------------------------------------)

73- Name the seven structural design patterns.

Ans- Decorator, Proxy, Bridge, Composite, Flyweight, Adapter, Façade.

(-----------------------------------------------------------------------)

74- What is the main purpose of structural patterns?

Ans- To define how objects and classes are composed to form larger structures, enhancing flexibility, longevity, and security.

(-----------------------------------------------------------------------)

75- How does the Decorator pattern differ from subclassing?

Ans- Decorators add functionality without modifying the original class, whereas subclassing creates a new class with additional behavior.

(-----------------------------------------------------------------------)

76- What are the main components of the Decorator pattern?

Ans- Component, IComponent, Decorator.

(-----------------------------------------------------------------------)

77- In the Decorator pattern, what is the role of the IComponent interface?

Ans- It defines the interface for objects that can have additional behavior added by decorators.

(-----------------------------------------------------------------------)

78- What is the advantage of using the Decorator pattern?

Ans- It allows for dynamic addition of behavior and state to objects, making it highly flexible and reusable.

(-----------------------------------------------------------------------)

79- How does a Proxy differ from the real object it represents?

Ans- A Proxy controls access and may add additional functionality or manage access, while the real object provides the core functionality.

(-----------------------------------------------------------------------)

80- What are the types of Proxies?

Ans- Virtual Proxy, Remote Proxy, and Protective Proxy.

(-----------------------------------------------------------------------)

81- How does the Bridge pattern support the decoupling of abstraction and implementation?

Ans- By providing an interface (abstraction) and a separate implementation interface, enabling them to be changed independently.

(-----------------------------------------------------------------------)

82- What are the key components of the Bridge pattern?

Ans- Abstraction, RefinedAbstraction, Implementor, ConcreteImplementor.

(-----------------------------------------------------------------------)

83- What is the Composite pattern used for?

Ans- To treat individual objects and compositions of objects uniformly.

(-----------------------------------------------------------------------)

84- How does the Composite pattern simplify working with hierarchical structures?

Ans- It allows clients to work with individual objects and compositions of objects in a consistent way.

(-----------------------------------------------------------------------)

85- What are the main components of the Composite pattern?

Ans- Component, Leaf, Composite.

(------------------------------------------------------------------------)

86- What is the Flyweight pattern used for?

Ans- To reduce the cost of creating and managing large numbers of small objects by sharing common states.

(------------------------------------------------------------------------)

87- How does the Flyweight pattern optimize resource usage?

Ans- By sharing common state across multiple objects and separating intrinsic and extrinsic state.

(------------------------------------------------------------------------)

88- What are the main components of the Flyweight pattern?

Ans- Flyweight, ConcreteFlyweight, FlyweightFactory.

(------------------------------------------------------------------------)

89- What is the Adapter pattern used for?

Ans- To match incompatible interfaces by converting the interface of a class into another interface that a client expects.

(------------------------------------------------------------------------)

90- How does the Adapter pattern enable compatibility between different interfaces?

Ans- By providing a wrapper that translates the interface of one class into another expected by the client.

(------------------------------------------------------------------------)

91- What are the types of Adapters?

Ans- Class Adapter and Object Adapter.

(------------------------------------------------------------------------)

92- What is the Façade pattern used for?

Ans- To provide a simplified interface to a complex subsystem, making it easier to use.

(------------------------------------------------------------------------)

93- How does the Façade pattern improve the usability of a subsystem?

Ans- By offering a unified and simplified interface to interact with a complex set of classes and subsystems.

(------------------------------------------------------------------------)

94- What are the main components of the Façade pattern?

Ans- Façade, Subsystem Classes.

(------------------------------------------------------------------------)

95- Can there be multiple decorators in the Decorator pattern?

Ans- Yes, different types of decorators like tags, borders, or invisibility can be applied.

(------------------------------------------------------------------------)

96- Does the Decorator pattern rely on inheritance to extend behavior?

Ans- No, it uses composition to extend behavior without relying on inheritance.

(------------------------------------------------------------------------)

97- Can decorators add new operations in the Decorator pattern?

Ans- Yes, decorators can add new state and behavior, including new operations.

(------------------------------------------------------------------------)

98- How does the Decorator pattern prevent objects from becoming too heavyweight?

Ans- By using composition instead of inheritance, decorators remain lean and only add necessary behavior.

(------------------------------------------------------------------------)

99- What does the term "multiple operations" refer to in the context of the Decorator pattern?

Ans- It refers to the ability to perform various operations on components, which may be part of the original component or added by decorators.

(------------------------------------------------------------------------)

100- What is the Decorator pattern?

Ans- The Decorator pattern allows behavior to be added to individual objects dynamically without affecting the behavior of other objects from the same class.

(------------------------------------------------------------------------)

101- How does the Decorator pattern handle object creation?

Ans- The Decorator pattern creates new objects with their own set of operations, some of which may be inherited but typically only down one level.

(-----------------------------------------------------------------------)

102- Why might altering properties in a second-level decorator fail in the Decorator pattern?

Ans- The second-level decorator does not hold a reference to the original object, so changes do not propagate beyond the first-level decorator.

(-----------------------------------------------------------------------)

103- What is an alternative pattern if the Decorator pattern does not fit?

Ans- The Strategy pattern is a better fit when the Decorator pattern does not allow for sufficient manipulation of an object’s properties.

(-----------------------------------------------------------------------)

104- What is a common use case for the Decorator pattern in graphics programming?

Ans- The Decorator pattern is commonly used to add layers of functionality in graphics, video streaming, and sound processing.

(-----------------------------------------------------------------------)

105- Can you provide an example of the Decorator pattern in .NET?

Ans- In .NET, decorators are used in the I/O APIs, such as System.IO.BufferedStream and System.Security.Cryptography.CryptoStream.

(-----------------------------------------------------------------------)

106- How is the Decorator pattern useful in mobile application development?

Ans- It allows mobile apps to create display objects tailored for smaller screens, such as including scroll bars and excluding certain elements like banners.

(-----------------------------------------------------------------------)

107- When is the Decorator pattern generally recommended?

Ans- The Decorator pattern is recommended when you need to add behavior to objects dynamically and flexibly without modifying the original object’s code.

(-----------------------------------------------------------------------)

108- What are the main benefits of using the Decorator pattern?

Ans- It allows you to make changes to some objects in a class without affecting others and helps avoid subclassing, which could lead to an overwhelming number of classes.

(-----------------------------------------------------------------------)

109- What are the key reasons to avoid subclassing when using the Decorator pattern?

Ans- Subclassing can lead to a large number of classes, making the system harder to manage and understand.

(-----------------------------------------------------------------------)

110- When should you consider using the Adapter pattern instead of the Decorator pattern?

Ans- Consider the Adapter pattern when you need to set up an interface between different classes.

(-----------------------------------------------------------------------)

111- How does the Composite pattern differ from the Decorator pattern?

Ans- The Composite pattern aggregates objects without inheriting their interface, while the Decorator pattern wraps objects to add behavior or state.

(-----------------------------------------------------------------------)

112- In what scenario would the Proxy pattern be more appropriate than the Decorator pattern?

Ans- The Proxy pattern is more appropriate when you need to specifically control access to objects rather than just adding behavior.

(-----------------------------------------------------------------------)

114- How does the Strategy pattern differ from the Decorator pattern?

Ans- The Strategy pattern changes the original object by selecting different algorithms or strategies, while the Decorator pattern wraps the object to add or override behavior without modifying the original object.

(-----------------------------------------------------------------------)

115- Why might you choose the Decorator pattern over creating subclasses?

Ans- The Decorator pattern offers more flexibility and avoids the complexity of creating numerous subclasses, which can make the system difficult to maintain.

(-----------------------------------------------------------------------)

116- What problem does the Decorator pattern solve regarding object behavior?

Ans- The Decorator pattern allows you to dynamically add or modify the behavior of individual objects without altering the class itself.

(-----------------------------------------------------------------------)

117- Can you give an example of when the Decorator pattern is not suitable?

Ans- The Decorator pattern is not suitable when you need to adapt interfaces between different classes, in which case the Adapter pattern would be more appropriate.

(-----------------------------------------------------------------------)

118- What is the Proxy Pattern?

Ans- The Proxy Pattern provides a surrogate or placeholder for another object to control access to it.

(-----------------------------------------------------------------------)

119- What are the main components of the Proxy Pattern?

Ans- The main components are the Subject, Proxy, and ISubject interface.

(-----------------------------------------------------------------------)

120- What is the role of the Proxy class?

Ans- The Proxy class controls and manages access to the Subject object, often adding additional functionality.

(-----------------------------------------------------------------------)

121- How does a virtual proxy differ from other proxies?

Ans- A virtual proxy delays the creation of an object until it is needed, optimizing resource usage.

(-----------------------------------------------------------------------)

122- What is an authentication proxy?

Ans- An authentication proxy checks access permissions before allowing a request to proceed to the Subject.

(-----------------------------------------------------------------------)

123- Explain the purpose of a remote proxy.

Ans- A remote proxy handles requests to an object that resides in a different address space, often across a network.

(-----------------------------------------------------------------------)

124- What is a smart proxy?

Ans- A smart proxy adds additional actions or modifications to requests before they reach the Subject.

(-----------------------------------------------------------------------)

125- How does the Proxy Pattern enhance security?

Ans- By controlling access and adding authentication layers, the Proxy Pattern can prevent unauthorized actions.

(-----------------------------------------------------------------------)

126- What is the advantage of using the Proxy Pattern in a system?

Ans- It provides controlled and enhanced access to an object, reducing overhead and increasing security.

(-----------------------------------------------------------------------)

127- Can a proxy be used to represent multiple objects?

Ans- Yes, a proxy can be designed to handle multiple Subject objects, though it typically represents one.

(-----------------------------------------------------------------------)

128- How is the Proxy Pattern used in social networking systems like Facebook?

Ans- Proxies manage user sessions, control access to user pages, and route actions across the network.

(-----------------------------------------------------------------------)

129- When would you use a virtual proxy?

Ans- Use a virtual proxy when object creation is expensive or resource-intensive, and you want to delay this until absolutely necessary.

(-----------------------------------------------------------------------)

130- Describe a situation where an authentication proxy is useful.

Ans- An authentication proxy is useful in scenarios requiring user authentication before accessing sensitive resources, like logging into a secure website.

(-----------------------------------------------------------------------)

131- What is the main difference between a Proxy Pattern and a Decorator Pattern?

Ans- The Proxy Pattern controls access to an object, while the Decorator Pattern adds responsibilities to objects.

(-----------------------------------------------------------------------)

132- What is lazy initialization in the context of the Proxy Pattern?

Ans- Lazy initialization is a strategy where the Subject object is only created when its first method is called, as seen in a virtual proxy.

(-----------------------------------------------------------------------)

133- Can the Proxy Pattern be combined with other design patterns?

Ans- Yes, the Proxy Pattern can be combined with patterns like Singleton or Strategy to enhance its capabilities.

(-----------------------------------------------------------------------)

134- How does the Proxy Pattern help with network efficiency?

Ans- By using remote proxies, it encodes requests and minimizes data transfer over the network, improving efficiency.

(-----------------------------------------------------------------------)

135- Give an example of a real-world application of the Proxy Pattern.

Ans- A proxy server in networking acts as an intermediary for requests from clients seeking resources from other servers.

(-----------------------------------------------------------------------)

136- What is the purpose of a Proxy pattern?

Ans- The Proxy pattern acts as an intermediary for controlling access to a class that has sensitive data or is expensive to instantiate.

(-----------------------------------------------------------------------)

137- When should you use the Proxy pattern?

Ans- Use the Proxy pattern when you need to control access to an object, perform lazy initialization, or handle remote requests.

(-----------------------------------------------------------------------)

138- What are some common use cases for the Proxy pattern?

Ans- Common use cases include access control, lazy loading, remote object management, and logging.

(-----------------------------------------------------------------------)

139- Can you explain how a Proxy pattern might be used in an image-drawing system?

Ans- In an image-drawing system, a proxy could display a placeholder image while the actual image is being fetched and rendered.

(-----------------------------------------------------------------------)

140- What role does the Proxy pattern play in video streaming?

Ans- A Proxy can initiate buffering and manage data flow before the full video is streamed to the user.

(-----------------------------------------------------------------------)

141- What is a remote proxy and where is it commonly used?

Ans- A remote proxy represents an object that resides in a different address space and is commonly used in client/server architectures like .NET Framework.

(-----------------------------------------------------------------------)

142- How can you change a design so that a Client does not inherit from a Program in the Proxy pattern?

Ans- The Client can instantiate the Program instead of inheriting from it.

(-----------------------------------------------------------------------)

143- How could you enhance the SpaceBook system using the Proxy pattern?

Ans- You can add a friends-only feature where actions like "Poke" are allowed only between accepted friends, encapsulating this logic within the proxy.

(-----------------------------------------------------------------------)


