1- What are React Hooks?

Ans- Hooks allow you to use state and other React features in functional components.

(------------------------------------------------------------------------)

2- What is the purpose of the useState hook?

Ans- useState allows you to declare state variables in functional components.

(------------------------------------------------------------------------)

3- How does useReducer differ from useState?

Ans- useReducer manages state with a reducer function, suitable for complex state logic.

(------------------------------------------------------------------------)

4- When would you use useState?

Ans- Use useState for simple state management like tracking form inputs.

(------------------------------------------------------------------------)

5- In what scenario would you prefer useReducer over useState?

Ans- Use useReducer when dealing with multiple sub-values or complex state transitions.

(------------------------------------------------------------------------)

6- What does the useContext hook do?

Ans- useContext allows components to subscribe to context changes without passing props.

(------------------------------------------------------------------------)

7- Why is context useful in React?

Ans- Context helps manage global state or themes without prop drilling.

(------------------------------------------------------------------------)

8- What is the purpose of the useRef hook?

Ans- useRef holds mutable values or references to DOM nodes without causing re-renders.

(------------------------------------------------------------------------)

9- What is useImperativeHandle used for?

Ans- useImperativeHandle customizes the instance value exposed to parent components.

(------------------------------------------------------------------------)

10- What does useEffect accomplish?

Ans- useEffect connects components to external systems and handles side effects.

(------------------------------------------------------------------------)

