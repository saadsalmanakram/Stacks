1- What is a React component?

Ans- A React component is a JavaScript function that returns JSX to define part of the UI.

(--------------------------------------------------------------------------)

2- How do you declare a React component?

Ans- A React component is declared as a function that returns JSX markup.

(--------------------------------------------------------------------------)

3- What is JSX in React?

Ans- JSX is a syntax extension of JavaScript that allows writing HTML-like code in React components.

(--------------------------------------------------------------------------)

4- Why must React component names start with a capital letter?

Ans- React components are distinguished from HTML elements by their capitalized names.

(--------------------------------------------------------------------------)

5- How can you nest components in React?

Ans- Components can be nested by calling one component inside the return statement of another.

(--------------------------------------------------------------------------)

6- What is the purpose of the export default statement in React?

Ans- It specifies the main component to be exported from the file.

(--------------------------------------------------------------------------)

7- How does JSX differ from HTML?

Ans- JSX is stricter than HTML; all tags must be closed, and components must be wrapped in a parent tag.

(--------------------------------------------------------------------------)

8- How do you apply CSS styles in React?

Ans- You use className to apply CSS classes and inline styles via an object in the style attribute.

(--------------------------------------------------------------------------)

9- How do you display data in JSX?

Ans- You use curly braces {} to embed JavaScript expressions inside JSX.

(--------------------------------------------------------------------------)

10- How do you conditionally render components in React?

Ans- You can use JavaScript conditional statements like if, the ternary ? operator, or logical &&.

(--------------------------------------------------------------------------)

11- How do you render a list of components in React?

Ans- By using the map() function to transform an array into an array of React elements.

(--------------------------------------------------------------------------)

12- What is the purpose of the key attribute in list rendering?

Ans- Keys uniquely identify elements in a list, helping React efficiently update the UI.

(--------------------------------------------------------------------------)

13- How do you handle conditional rendering inside JSX?

Ans- Conditional rendering is handled using ternary operators or logical && within JSX.

(--------------------------------------------------------------------------)

14- What is the significance of curly braces in JSX?

Ans- Curly braces allow JavaScript expressions to be inserted into JSX markup.

(--------------------------------------------------------------------------)

15- What happens if you forget to include a key when rendering lists in React?

Ans- React may not correctly identify elements when updating the list, leading to potential performance issues.

(--------------------------------------------------------------------------)

16- Can you return multiple elements from a React component?

Ans- Yes, but they must be wrapped inside a parent element like a <div> or React fragment (<>...</>).

(--------------------------------------------------------------------------)

17- How do you apply inline styles in React components?

Ans- Inline styles are applied using the style attribute, where the value is a JavaScript object.

(-------------------------------------------------------------------------)

18- How do you display dynamic attributes, such as image URLs, in React?

Ans- You use curly braces to pass JavaScript expressions, e.g., src={user.imageUrl}.

(-------------------------------------------------------------------------)

19- How can you apply conditional inline styles in React?

Ans- By using curly braces to evaluate expressions, e.g., style={{ color: isActive ? 'green' : 'red' }}.

(-------------------------------------------------------------------------)

21- What is the significance of the key attribute in React lists?

Ans- The key attribute helps React uniquely identify list items, improving the rendering process by tracking changes (insertion, deletion, reordering).

(-------------------------------------------------------------------------)

22- Why should key values be unique for each list item?

Ans- Unique key values allow React to differentiate between items, preventing unnecessary re-rendering of the entire list.

(-------------------------------------------------------------------------)

23- What will happen if you don't provide a key for list items in React?

Ans- React will issue a warning, and performance might degrade as React struggles to optimize list rendering.

(--------------------------------------------------------------------------)

24- How does React handle events like button clicks?

Ans- React uses event handlers (like onClick) to trigger functions that respond to user actions.

(--------------------------------------------------------------------------)

25- Why don't we use parentheses when passing event handlers in JSX?

Ans- Event handlers are passed as references (e.g., onClick={handleClick}) so they aren't invoked immediately but are called when the event occurs.

(--------------------------------------------------------------------------)

26- What is the role of useState in React?

Ans- useState is a Hook that allows you to add state to functional components and manage updates.

(--------------------------------------------------------------------------)

27- What do you get from the useState hook?

Ans- useState provides a state variable and a function to update that state.

(--------------------------------------------------------------------------)

28- How does React update the screen when state changes?

Ans- When state changes using the setter function (e.g., setCount), React re-renders the component with the updated state.

(--------------------------------------------------------------------------)

29- What happens when multiple components use useState independently?

Ans- Each component maintains its own state, so changes in one do not affect the others.

(--------------------------------------------------------------------------)

30- What is a React Hook?

Ans- A Hook is a special function in React (like useState) that lets you add state and other features to functional components.

(--------------------------------------------------------------------------)

31- Why should Hooks like useState be called at the top of a component?

Ans- Hooks must be called in the same order every time the component renders to ensure consistent state management.

(--------------------------------------------------------------------------)

32- What is "lifting state up" in React?

Ans- "Lifting state up" refers to moving shared state to a common ancestor component to manage and pass it as props to child components.

(--------------------------------------------------------------------------)

33- What are props in React?

Ans- Props are arguments passed from parent to child components, allowing for dynamic data flow.

(--------------------------------------------------------------------------)

34- How do you pass state and event handlers to child components?

Ans- State and event handlers are passed to child components as props (e.g., count={count}, onClick={handleClick}).

(--------------------------------------------------------------------------)

35- How does React re-render components when the state changes?

Ans- React compares the current state with the previous state, and if changes are detected, it triggers a re-render to reflect the updates.

(--------------------------------------------------------------------------)

36- What does the onClick event do in React?

Ans- The onClick event binds an event handler function to be executed when a button or other clickable element is clicked.

(--------------------------------------------------------------------------)

37- Why is state passed as a prop to child components?

Ans- Passing state as a prop allows child components to reflect the latest data from their parent component.

(--------------------------------------------------------------------------)

38- How can multiple components share the same state?

Ans- By lifting state to their closest common parent and passing it down as props, components can share and synchronize state.

(--------------------------------------------------------------------------)

39- How do you pass a prop to a component in React?

Ans- You use the syntax <ComponentName propName={value} /> to pass props.

(--------------------------------------------------------------------------)

40- What is the purpose of curly braces in JSX?

Ans- Curly braces allow you to embed JavaScript expressions within JSX.

(--------------------------------------------------------------------------)

41- What does the useState hook do?

Ans- It allows a functional component to manage its own state.

(--------------------------------------------------------------------------)

42- How can you inspect React component props and state?

Ans- You can use React Developer Tools in the browser to inspect component props and state.

(--------------------------------------------------------------------------)

43- What will happen if you forget to add curly braces around a variable in JSX?

Ans- It will render the variable name as a string rather than its value.

(--------------------------------------------------------------------------)

44- How do you define an event handler for a button in React?

Ans- By passing a function to the onClick prop of the button.

(--------------------------------------------------------------------------)

45- What does "lifting state up" mean in React?

Ans- It refers to moving the state from child components to a common parent component to manage shared state effectively.

(--------------------------------------------------------------------------)

46- Why is lifting state up beneficial in a React application?

Ans- It ensures that components share and synchronize data, reducing complexity and preventing bugs in state management.

(--------------------------------------------------------------------------)

47- What is the downside of each child component managing its own state?

Ans- It complicates data sharing between components and can lead to inconsistent UI states.

(--------------------------------------------------------------------------)

48- What function do you use to update state in a parent component?

Ans- The setState function returned by the useState hook is used to update the state in the parent component.

(--------------------------------------------------------------------------)

49- How do you pass data from a parent component to a child component?

Ans- By using props, which allow you to pass values and functions from the parent to the child.

(--------------------------------------------------------------------------)

50- What is a closure, and how does it relate to state management in React?

Ans- A closure allows inner functions to access variables from outer functions, enabling components to manage state effectively through event handlers.

(--------------------------------------------------------------------------)

51- What happens if you directly call a function in JSX while passing it as a prop?

Ans- It executes immediately during rendering, leading to potential infinite re-renders if the function alters state.

(--------------------------------------------------------------------------)

52- How can you avoid re-rendering issues when passing functions to child components?

Ans- Use an arrow function in the JSX to create a new function that captures the correct arguments without executing immediately.

(--------------------------------------------------------------------------)

53- When would you choose to keep state in a child component instead of lifting it up?

Ans- When the state is specific to the child and doesn't need to be shared with other components, keeping it local is simpler.

(--------------------------------------------------------------------------)

54- What is the purpose of using slice() when updating an array in state?

Ans- It creates a shallow copy of the array to avoid direct mutation, ensuring that React detects changes and triggers a re-render.

(--------------------------------------------------------------------------)

55- Why is it important to keep components in sync with their parent?

Ans- It ensures that the UI reflects the current state accurately, maintaining consistency across the application.

(--------------------------------------------------------------------------)

56- What are potential pitfalls of managing state in deeply nested child components?

Ans- It can lead to "prop drilling," where props need to be passed through many layers, complicating maintenance and readability.

(--------------------------------------------------------------------------)

57- How does React decide to re-render components?

Ans- React re-renders components when their props or state change, allowing dynamic updates.

(--------------------------------------------------------------------------)

58- What is immutability, and why is it important in React?

Ans- Immutability means not modifying existing data but returning new copies, simplifying state management and improving performance.

(--------------------------------------------------------------------------)

59- How does immutability benefit component re-renders?

Ans- It allows React to efficiently compare old and new states to decide if a re-render is necessary.

(--------------------------------------------------------------------------)

60- How can immutability help implement features like undo/redo?

Ans- It ensures that previous states remain unchanged, making it easier to "travel" back in time.

(--------------------------------------------------------------------------)

61- What is time travel in the context of a React app?

Ans- It's the ability to go back to previous states of a game or app by storing and navigating past states.

(--------------------------------------------------------------------------)

62- Why is immutability important when implementing time travel?

Ans- Immutability allows us to easily store and revert to previous states without modifying them directly.

(--------------------------------------------------------------------------)

63- How does using slice() help in implementing time travel?

Ans- slice() creates a new copy of the game state, preserving the previous states for time travel.

(--------------------------------------------------------------------------)

64- How do you lift state up in React, and why is it needed for time travel?

Ans- State is lifted up by moving it to a common parent component, which allows managing shared state across multiple child components.

(--------------------------------------------------------------------------)

65- Why do we get a warning about missing 'key' props when rendering moves?

Ans- React requires a unique key prop for each list item to track changes efficiently.

(--------------------------------------------------------------------------)

66- Why are keys used in React?

Ans- Keys help React identify which items have changed, been added, or removed from lists during re-rendering.

(--------------------------------------------------------------------------)

67- What happens if you don’t assign a key to a list item in React?

Ans- React will use the array index as a key by default, which can lead to issues with item reordering or insertion.

(--------------------------------------------------------------------------)

68- Can you use the array index as a key in React?

Ans- It's possible but not recommended, especially when the list may change due to reordering, insertion, or deletion.

(--------------------------------------------------------------------------)

69- Why is using unique IDs from a database as keys better than using array indexes?

Ans- Unique IDs ensure the correct identification of elements across renders, avoiding issues when the order or content of the list changes.

(--------------------------------------------------------------------------)

70- What happens if two keys in a list match between renders?

Ans- React reuses the component for that key rather than creating a new one.

(--------------------------------------------------------------------------)

71- Do keys need to be globally unique across the entire application?

Ans- No, keys only need to be unique among siblings in a list.

(--------------------------------------------------------------------------)

72- Why should redundant state be avoided in React components?

Ans- Redundant state can lead to bugs and make the code harder to understand and maintain.

(--------------------------------------------------------------------------)

73- What happens when React finds a key in the current list that wasn’t present in the previous render?

Ans- React creates a new component for the newly added key.

(--------------------------------------------------------------------------)

74- What happens if a key is missing from the current list but was present in the previous render?

Ans- React destroys the component associated with the missing key.

(--------------------------------------------------------------------------)

75- How does React handle component state when a key changes between renders?

Ans- If a key changes, React destroys and re-creates the component, resetting its state.

(--------------------------------------------------------------------------)

76- What is the first step in building a UI in React?

Ans- Break the UI into a component hierarchy.

(--------------------------------------------------------------------------)

77- How do you decide what should be a component in React?

Ans- Use the single responsibility principle, ensuring each component has a single function.

(--------------------------------------------------------------------------)

78- What does a static version of an app mean in React?

Ans- A version that renders the UI without interactivity, using only props and no state.

(--------------------------------------------------------------------------)

79- What is one-way data flow in React?

Ans- Data flows from parent components to child components through props.

(--------------------------------------------------------------------------)

80- What is state in React, and how is it different from props?

Ans- State is local and mutable within a component, while props are passed from parent to child and immutable.

(--------------------------------------------------------------------------)

81- When should you use state in React?

Ans- When data changes over time and cannot be computed from props or static values.

(--------------------------------------------------------------------------)

82- How do you identify where state should live in React?

Ans- By identifying the common parent component of all components that depend on that state.

(--------------------------------------------------------------------------)

83- What is the purpose of the useState Hook in React?

Ans- It allows components to manage and update local state.

(--------------------------------------------------------------------------)

84- How do you pass state values down to child components in React?

Ans- By passing them as props to child components.

(--------------------------------------------------------------------------)

85- Why is it important to keep your state minimal in React?

Ans- To avoid redundancy and keep the state DRY (Don't Repeat Yourself).

(--------------------------------------------------------------------------)

86- What kind of data should not be stored in state?

Ans- Data that can be computed or remains unchanged over time.

(--------------------------------------------------------------------------)

87- What is the role of props in building a static version of a React app?

Ans- Props are used to pass data from parent to child components without involving state.

(--------------------------------------------------------------------------)

88- What is the key benefit of breaking your UI into components in React?

Ans- It improves reusability and separation of concerns.

(--------------------------------------------------------------------------)

89- How do you filter data in a React component based on user input?

Ans- Use state to store the input, and apply filtering logic in the component rendering the data.

(--------------------------------------------------------------------------)

90- How does React enforce the principle of one-way data flow?

Ans- By passing data through props from parent to child components.

(--------------------------------------------------------------------------)

91- How do you make a component interactive in React?

Ans- By adding state to handle dynamic data and user interactions.

(--------------------------------------------------------------------------)

92- How can you start a new React project?

Ans- By using a React-powered framework or running 'npx create-react-app'.

(--------------------------------------------------------------------------)

93- Can you use React without a framework?

Ans- Yes, but frameworks solve common problems like code-splitting, routing, and data fetching.

(--------------------------------------------------------------------------)

94- Why is it recommended to use a framework with React?

Ans- Frameworks help avoid building solutions for common UI problems from scratch.

(--------------------------------------------------------------------------)

95- What is Next.js in the React ecosystem?

Ans- Next.js is a full-stack React framework for building apps of any size, from static sites to dynamic applications.

(--------------------------------------------------------------------------)

96- How can you create a new Next.js project?

Ans- By running the command 'npx create-next-app@latest' in the terminal.

(--------------------------------------------------------------------------)

97- Which company maintains Next.js?

Ans- Vercel maintains Next.js.

(--------------------------------------------------------------------------)

98- What is Remix in the React framework world?

Ans- Remix is a full-stack React framework with nested routing for parallel data loading and refreshing.

(--------------------------------------------------------------------------)

99- How do you create a new Remix project?

Ans- By running the command 'npx create-remix' in the terminal.

(--------------------------------------------------------------------------)

100- Which company maintains Remix?

Ans- Shopify maintains Remix.

(--------------------------------------------------------------------------)

101- What is Gatsby used for?

Ans- Gatsby is a React framework focused on building fast, CMS-backed websites with a plugin ecosystem and GraphQL support.

(--------------------------------------------------------------------------)

102- How do you create a new Gatsby project?

Ans- By running the command 'npx create-gatsby' in the terminal.

(--------------------------------------------------------------------------)

103- Which company maintains Gatsby?

Ans- Netlify maintains Gatsby.

(--------------------------------------------------------------------------)

104- What is Expo used for in the React ecosystem?

Ans- Expo is used for building universal Android, iOS, and web apps with native UIs, using React Native.

(--------------------------------------------------------------------------)

105- How do you create a new Expo project?

Ans- By running the command npx create-expo-app in the terminal.

(--------------------------------------------------------------------------)

106- Which company maintains Expo?

Ans- Expo (the company) maintains Expo.

(--------------------------------------------------------------------------)

107- What are bleeding-edge React frameworks?

Ans- These are frameworks integrating bleeding-edge React features, like React Server Components, to help build better apps.

(--------------------------------------------------------------------------)

108- What is the Next.js App Router?

Ans- The App Router in Next.js is a redesign aimed at fulfilling React’s full-stack architecture vision with asynchronous server components.

(--------------------------------------------------------------------------)

109- What company maintains the Next.js App Router?

Ans- Vercel maintains the Next.js App Router.

(--------------------------------------------------------------------------)

110- What is the primary benefit of using a framework like Next.js or Remix for production apps?

Ans- They provide full-stack support, helping scale and deploy apps efficiently.

(--------------------------------------------------------------------------)


